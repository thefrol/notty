// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package generated

import (
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Добавить клиента
	// (POST /customer)
	CreateClient(w http.ResponseWriter, r *http.Request)
	// Удалить клиента
	// (DELETE /customer/{Id})
	DeleteClient(w http.ResponseWriter, r *http.Request, id string)
	// Возвращает клиента
	// (GET /customer/{Id})
	GetClient(w http.ResponseWriter, r *http.Request, id string)
	// Изменить клиента
	// (POST /customer/{Id})
	UpdateClient(w http.ResponseWriter, r *http.Request, id string)
	// Получить статистику по клиенту
	// (GET /customer/{Id}/stats)
	CustomerStats(w http.ResponseWriter, r *http.Request, id string)
	// Получить инфу про конкретное сообщение
	// (GET /message/{Id})
	GetMessage(w http.ResponseWriter, r *http.Request, id string)
	// Получить статистику сообщений
	// (GET /stats)
	FullStats(w http.ResponseWriter, r *http.Request)
	// Получить статистику сообщений по айдишнику клиента
	// (GET /stats/customer/{Id})
	StatsByCustomerId(w http.ResponseWriter, r *http.Request, id string)
	// Получить статистику сообщений по айдишнику рассылки
	// (GET /stats/subs/{Id})
	StatsBySubscriptionId(w http.ResponseWriter, r *http.Request, id string)
	// Создать рассылку
	// (POST /sub)
	CreateSubscription(w http.ResponseWriter, r *http.Request)
	// Удалить рассылку
	// (DELETE /sub/{Id})
	DeleteSubscription(w http.ResponseWriter, r *http.Request, id string)
	// Получить уже существующую рассылку
	// (GET /sub/{Id})
	GetSubscription(w http.ResponseWriter, r *http.Request, id string)
	// Обновить рассылку
	// (POST /sub/{Id})
	UpdateSubscription(w http.ResponseWriter, r *http.Request, id string)
	// Получить статистику по рассылке
	// (GET /sub/{Id}/stats)
	SubscriptionStats(w http.ResponseWriter, r *http.Request, id string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Добавить клиента
// (POST /customer)
func (_ Unimplemented) CreateClient(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Удалить клиента
// (DELETE /customer/{Id})
func (_ Unimplemented) DeleteClient(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Возвращает клиента
// (GET /customer/{Id})
func (_ Unimplemented) GetClient(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Изменить клиента
// (POST /customer/{Id})
func (_ Unimplemented) UpdateClient(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получить статистику по клиенту
// (GET /customer/{Id}/stats)
func (_ Unimplemented) CustomerStats(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получить инфу про конкретное сообщение
// (GET /message/{Id})
func (_ Unimplemented) GetMessage(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получить статистику сообщений
// (GET /stats)
func (_ Unimplemented) FullStats(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получить статистику сообщений по айдишнику клиента
// (GET /stats/customer/{Id})
func (_ Unimplemented) StatsByCustomerId(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получить статистику сообщений по айдишнику рассылки
// (GET /stats/subs/{Id})
func (_ Unimplemented) StatsBySubscriptionId(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Создать рассылку
// (POST /sub)
func (_ Unimplemented) CreateSubscription(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Удалить рассылку
// (DELETE /sub/{Id})
func (_ Unimplemented) DeleteSubscription(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получить уже существующую рассылку
// (GET /sub/{Id})
func (_ Unimplemented) GetSubscription(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Обновить рассылку
// (POST /sub/{Id})
func (_ Unimplemented) UpdateSubscription(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получить статистику по рассылке
// (GET /sub/{Id}/stats)
func (_ Unimplemented) SubscriptionStats(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CreateClient operation middleware
func (siw *ServerInterfaceWrapper) CreateClient(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateClient(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteClient operation middleware
func (siw *ServerInterfaceWrapper) DeleteClient(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "Id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Id", runtime.ParamLocationPath, chi.URLParam(r, "Id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteClient(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetClient operation middleware
func (siw *ServerInterfaceWrapper) GetClient(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "Id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Id", runtime.ParamLocationPath, chi.URLParam(r, "Id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetClient(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateClient operation middleware
func (siw *ServerInterfaceWrapper) UpdateClient(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "Id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Id", runtime.ParamLocationPath, chi.URLParam(r, "Id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateClient(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CustomerStats operation middleware
func (siw *ServerInterfaceWrapper) CustomerStats(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "Id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Id", runtime.ParamLocationPath, chi.URLParam(r, "Id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CustomerStats(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMessage operation middleware
func (siw *ServerInterfaceWrapper) GetMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "Id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Id", runtime.ParamLocationPath, chi.URLParam(r, "Id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMessage(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FullStats operation middleware
func (siw *ServerInterfaceWrapper) FullStats(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FullStats(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// StatsByCustomerId operation middleware
func (siw *ServerInterfaceWrapper) StatsByCustomerId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "Id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Id", runtime.ParamLocationPath, chi.URLParam(r, "Id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StatsByCustomerId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// StatsBySubscriptionId operation middleware
func (siw *ServerInterfaceWrapper) StatsBySubscriptionId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "Id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Id", runtime.ParamLocationPath, chi.URLParam(r, "Id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StatsBySubscriptionId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateSubscription operation middleware
func (siw *ServerInterfaceWrapper) CreateSubscription(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSubscription(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSubscription operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubscription(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "Id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Id", runtime.ParamLocationPath, chi.URLParam(r, "Id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubscription(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSubscription operation middleware
func (siw *ServerInterfaceWrapper) GetSubscription(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "Id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Id", runtime.ParamLocationPath, chi.URLParam(r, "Id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscription(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateSubscription operation middleware
func (siw *ServerInterfaceWrapper) UpdateSubscription(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "Id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Id", runtime.ParamLocationPath, chi.URLParam(r, "Id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSubscription(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SubscriptionStats operation middleware
func (siw *ServerInterfaceWrapper) SubscriptionStats(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "Id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Id", runtime.ParamLocationPath, chi.URLParam(r, "Id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SubscriptionStats(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/customer", wrapper.CreateClient)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/customer/{Id}", wrapper.DeleteClient)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/customer/{Id}", wrapper.GetClient)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/customer/{Id}", wrapper.UpdateClient)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/customer/{Id}/stats", wrapper.CustomerStats)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/message/{Id}", wrapper.GetMessage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/stats", wrapper.FullStats)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/stats/customer/{Id}", wrapper.StatsByCustomerId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/stats/subs/{Id}", wrapper.StatsBySubscriptionId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/sub", wrapper.CreateSubscription)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/sub/{Id}", wrapper.DeleteSubscription)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sub/{Id}", wrapper.GetSubscription)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/sub/{Id}", wrapper.UpdateSubscription)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sub/{Id}/stats", wrapper.SubscriptionStats)
	})

	return r
}
