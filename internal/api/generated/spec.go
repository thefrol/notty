// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RY3W7jxBd/FWv+/0uTZGERUu7YhUXlgpsFcYEq5MbT1qvENvYEUVWR8rFAUartDRIS",
	"0hYtvEDiTajTJO4rnPNG6MzYie246baQdPcmiu2ZOV+/8ztnzjGrOQ3XsbktfFY9Zn7tkDcM+fdx0xdO",
	"g3v03+R+zbNcYTk2qzL4HaYQwhjm2NU1uIQIuxBhGyKYYU+DIfZgBGPsanCFbQjxR4hgBCF28VTDNgyw",
	"gx3swxQuYcB05nqOyz1hcSnXMulXHLmcVZkvPMs+YC2d2UaDF36gvYZwvMKP7qFjF28TxkHB+5bOPP5d",
	"0/K4yarfkC7JGWpHSlys0q6enOHsPeM1QWd/6nlKn6xlNccs1oXce7Mycnu8uEjq0+ZeKkp54YmMXCjP",
	"4QpC7MAA5hTSfHhCXcUwwg7FWIMRTPFMw59hDK/pOYI5DDTsQAQXMIIBBDCAqTzjVINQwy6MShrTV43m",
	"tgz0vuM1DMGqzDQEf09YDV60+BpQJMH4dt+qC74GAusW+MLwxJurIvgPosCRf8IYLslLyhkRDPEXShEI",
	"8UyDIO/Y8erRRdhTuilnrZqbMy7GRqziKkTIVl5repY4ekp5roDxiBse9z5uikN62pNPTxJPfP71l6SF",
	"XM2q8del6odCuKxFB1v2vlPglVcwxjYEBDENexDAGEZEEzBVvoGJBi+JP7ALoQZXEkYBRIQyySAZtw0U",
	"g3Rgds1xeFbS4FUGixPsFsKaXsPrxQK4XHIaRBAQdiHADu1dyJvACHtEa4FGsIcL+pW5MIc5RHRMgG0Y",
	"wwzPSuQlS9TJTUsTmc6+556vvPOgVIlBbBuuxarsg1KlVKGoGuJQxqZcS5Gw6/gSeAoFlmPvmKzKHnvc",
	"EPxx3eI2AYUQxH3xyDGPFOXYgj5Uj5nhunWrJjeWn/mKIhTd07//e3yfVdn/yst6UI6LQXlRCVotBVLf",
	"dWxfoef9ykcbkaPnkKTMNMlfDyuV/0ykYuoCefCrpMQ59imqMestWS5O6zRoBoSJcUKXJ/RFi9kwpD34",
	"E4T4ggz4cCsGnOMJhDCkGhvX4ZwBpF/GAMkQwjjwZbVJgrFLbxdALB/vmC2V6HUu+CoeP5HvF3h0Dc9o",
	"cME9OvSYWaQawTspn1W2Y7I08QmvyfWU8XmS3F0B4O2cmT9vxXHXeUFnB1wUUlzsU0lOOY/qOe98xsXb",
	"65q75qak7Sn2EibEPtF6yhEqax9uHvTXx66YPL9yTWPjYN02IW8p6OcwlEUviItvdK/cDCFcwEwqMv53",
	"7LwVoBbphh3sUc8oW+0Ae9T/vKvlwm/u3dSyZK4rm8mTjIjCXHmwMVn33sD8BoPk6ibxJR+oJw5hiqeU",
	"sIS45/LiPoNQXt8pIeZvFeYyIPPTPl4A7Q1bkhze7qH60rWs7NYN67YtCfwlHZLh2YfXHi5ue/pLIka6",
	"z0xgJEUM6HY0oLAQjV7J6Y0aE1xS2hfB4+62FYGgl7L3BhAs2rKVRuv+A745NnniNG1za9XqC0do+0ri",
	"ukCs67G2Eoz7qCDbi3lqsLHVbuvOhURXrCJzmnozbGux9nHr9q7dl9cWo+WndfNydfQYRrLLIy8uJl0k",
	"bAgRTBadIPmW1uFpbsw+iYfsahpVMGQvnI0tk2vRrbX0FWX/yNB97ISRnOP9TZdcDZ+ryGMX29jXZYFI",
	"qYd9mGXUC7APQwmZOfYzPaTcndqYmHICU3xBkgrNkNPUHsUJLhSa5OgNe/lSlR7HLW3PxK212/onAAD/",
	"/8gRU8UDGQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
