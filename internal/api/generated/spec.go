// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"9d8AAAD///BmnmaBNQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
