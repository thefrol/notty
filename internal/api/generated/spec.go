// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xcbW8bxxH+K9dLgyYIX2RbaVABRdHEceE26Zsb9INtBCfybF1C3jF3RyeuIUAkndiG",
	"HKswUsRoa6dJCvQrRZHRiRJPf2H2HxUzs/e+pEjHZtQ03yyStzs788wzb3u+pdecZsuxTdv39LVbulfb",
	"MJsG/fONtuc7TdPFf9dNr+ZaLd9ybH1Nh7/DIQQwgonoljQYQyi6EIotCOFI9DTYFT0Ywkh0NTgWWxCI",
	"jyGEIQSiK+5rYgv6oiM6YhsOYQz9igaP4AhG/PsJrgEjsaWJLozgEEbiNoQwgX5JgwCOxI4GIRzjL6Av",
	"d+1rEPDP90oaHEOoEGkEexBqogNHEMI30V59OBBdfDgvk17SW67TMl3fMkkZVl2hhj4c0LHuwgQCGOPy",
	"IYSwK+6hbiAQOyUN+jCBPdLXgejAGPXGGhrDQGxL0QOxBaOKBl+QokJaF2V8552L5/WSbn5kNFsNU1/T",
	"rRuGXfZNz3du6CXdv9nCDz3ftezr+mZJt42mGQnqJ4Ky4sQd0mgIAxjhKTMLwyMYoKwafAUj0UHtwUC1",
	"BWrF8B0VLHKGKWm4Dtkgv1vT91RrtzYc21QsPB0VGgw0/LfYgiPad6S98tqZM2fOnj177tzqambTV177",
	"2Zmf0nfnzql2943rxb1PwBXDaYLfJagXXeiLLdjDP8i0qPK+Av2il9WK49WcD8vrpucX5dss6a75Qdty",
	"zbq+dhkBGemLJU9ZRuLgaryGs/6eWfPxjG+6LpsuC++aUye9J7KsrqyqdITKyf7wt46vXXPadv1EkWkT",
	"uYRKtrdNzzOumwrpJBO9y15YEGrKxzGaCt94pu3jF9cct2n4+ppeN3yz7FtNU3Vmzzf8tqdeqL0eg2Wa",
	"dL75ka/4QmXP9EGLi8ulErNLwVS6vOQbTOhGvW7hAkbj9xmdyics2zevmy7JWVgjtb/CKR/DSBIqOjkS",
	"M/kjsuo+cwlyXUkTn6LLIBf0xD10FWKXAukG2UAwQEZkvp9AX9yBPhxSEBjm/VASe455s8uT84kOryb5",
	"dyh6FL6CzGbIVSFMaMOIwo9RZmQdxcZdjif5dadtXxS0osHfiCfvI5EFcCjuoz6ZcJh9oA9HJGeOYEUv",
	"HX3FNhpkC/qwSx/1xQNSZJ4f+ThEzCMY0HHxJBffuvibN4uBL3L4nPGfwDEEohNZuWDMEod+tnWIVjuM",
	"IhBuJsmbtLEPQ+gTYA5pjfsyJg4r2QD1r2yM1mBMJ6C8AhmWgfIxriN2YEDcWnBG01YF8rntz1jmI8iH",
	"2I5zwA1xrZfm5Jx58o1Fk4t/JqnPrtgmxBXyC8+062XfoRhUrjUsygtnZAHvXrMavipHLGJZhd40XFmy",
	"MfRhzGBE7F76w1sZ+V6cmjYsIkmcT4ieIs8UHRjBASJAdKQBEerHEOIysC96KCqad0q0cP3ZGCsS2tJw",
	"5RvXl20ymdUoLRfFxpyuvsIEFalDRezIaFm2GWWJ4jN6APnwALWLZcr9H2nwkGmUE+xdUvIkQyJ85pUX",
	"58u92M7MKEV/yIEyo3iZAsnTF6M3JSi1tmv5Ny9hOcZE/LppuKb7y7a/gX+t018XIpv/+s9/QpHo1/qa",
	"/DY5x4bvt/RNXNiyrzkqOhdd4mvkYdSE6FGRMCQ/OUxiaicTo6AvPqE68EAVrTRNUarBUUWjzIHDAxyL",
	"HhGXhBLFqIoGn1NwwHDBAEPPHIseG010U1kE+kzE/2HqFIdihxiOcXyEQhNPIrf3CrDCEwz4ZxMM36JX",
	"uWJfseE/JP0I9jXSx24Z+hj4NMZQvNEDpgOUNC6MJf0Wk5yv2WO+4UKv8It0TUFEjukUFw9TOESmBrm4",
	"xXkFylMob3MM14cxqhIGkv4oYAd45tRxYg2nASB68dHR9iVN3OGnkSuHXPajHeZJZvBzzsbCHBixfC1a",
	"bMQW+pLWwB92tMv0ECafSO1dsU1ZxSgyzj70tTMrfPjx1ZfQKby1avW65TeM9UrNaVb9DfOa6zSqtuP7",
	"N1+gKBlVsKOycnGSpAy7iJEyI1ncIV1KM5TJZMeU5wTypIHYeZmEp3Kf4XAsYXykEa5QVsqLJjAR2+Jj",
	"dD0YYlbD5kekjjnBShSAKiSIPUFCQ3Yb0pffsBolggMyJx7iNqGggzEIbYmuRK4sK1b8yY7MF1AkrHeD",
	"gpdxxatIa9mB6FC76AwDFDWqBoiXD/EfyC576OmUlfBnoZRhN10570hYJR6PQNQuy093SbVjGdGjDgbp",
	"DrUZpaP44cm2r5ar6w1nvdo0LLvqm55fbblOvYKP/cI1r72LvPrzDdOoe2TIyxRzxmgc6S3EjCgyeV8B",
	"AHBwsgwMkYektctEFsd0kGEELTYF5jF3aNdtDYlLdOeBtmK5l6/YGDEsn6PoY3L2LuEp7WRY8olOWRUh",
	"4EAv6TdM1+OocqZyTqaKttGy9DX9XGWlsoKh0fA3KKZVa6keY8vxVLnAl3GJIGNBQkn9igZ/zfXgFOzJ",
	"roogwow507OZ4KKk56/SWWDu0YRCFM0m6jSdW1199dVSBNDY62jfODgEHMmG6AyRwwXk2hxMYVKh7hvs",
	"qfhRi6yVLDiIfDWAffIHTE8pt82JiSYkf5CxPacWjcXAhG4ccTj7bIqVMp0u6adJB5UbvayAIwjFveiP",
	"gElRRoC7FLEoBnPpCnt4pFQmy02FVFWobJtVCKucdFmOfbGur+lvuKbhm29QzaJzwmZ6/utO/SZ3uGxf",
	"dn2MVqth1ejB6nse9zZk+kioVLdC127pXrvZNNybqVIso5ZURkNVV1fcR38wGm3qQnFvdmqjNemryu6o",
	"bF/puX4mdSl1WZpV3qbkmnJG+AfhoI+27jF2ZEDaOVn4bKaRFhsrUb1h/cUo+06rtmG9H7UX12bumDnQ",
	"umk2LGpZzXWoS8b7G0bDsjll5ZEEivJj17ymr+kvVJOZRVUOLKrxtGJzk9N1r+XYHhv07MqZOSCw+D6l",
	"6Vw1QeZbXVlZFHoTjBVR7sP+zHWMtFnOkp8ngU2WhPzXXWQzTTZVAmINjEcP2A2pfokNzL1f3bJvGA2r",
	"zl9y12fx9RmI0w6RLbVzR3k830PTBY+6opHsigXRS+OYl195AbBxF12FgCfiLgSwy5SXUw8ECIpXFwfF",
	"Q1mUUPUDE7HDsT/eKadJqsfRCcucalHVMOvxok7b9vu286GtmXTQWKfeBw3+SLNNw9Ve0ixbu/DH371d",
	"qVSejfrQZoFMsjtU5/XzwtI2yWE/iwsxHi9mEwSmFo+mD5HjXsUV4syjeutifZPTjobpq4ZPXxNcohRn",
	"lNtBFpi51hw1H7Ph6TytH4enluEaTdM3XRTulm7hVpgXJex6sa6n2w6+2zbTCs63KK4WSG9lIdLLr1cw",
	"Tl7zkV7m13tJv26qUrwviDYH1F+TBQc323pYSymWn1vpvzL9aRrPyfBIdoowcGOFO07yruzWmJ3IsC2L",
	"033uw6a6sFhzyC6sRsR4G9dJmrHZ/tjNdLdVL50CLDx1AEzMxlRDoSulP46Kq89MmKlMkgfrQ4YY5ZH3",
	"lLXENMhOKUuewC6l2oM5AFqA5TutuvHcuWCR9PdZ5FhLgliieKbkcP5M69tGp8+ifgxGAZ5oUbTiXn3c",
	"n84hIZM2HdK4sZg2LcktVLLJwSwH3AEPN+ZPVJ5pwsRFZKr+Q14P8o6ac+1HsQUWiUSpBb7IxRrRo4lu",
	"Xi/iAXW39nj+nBEon09UvWj8rg54KjaibfoUIah8pFZWdOsk6Sr3qB0zlrOoMXXL0g059gktKr8TMg4V",
	"Te9iDS1PwdcHTmGW8tTXGYrQu0CXVpZGHvlSSlGbiE7ctolvDUWV5DLIIXWtT9LWRIawEdVHs71mTvxO",
	"T8mbfP8nzsjVvpOgWkbxYZqVFSgPVFlhdNfoFEJ8lu0isWfDeQlYSW59nQALGjfcJiggpJNhHtWkFMlH",
	"iuFOCiUSFhIkJzBrHh0zUEnzCMVkSezAUQEyF9qNRkSKz826vIGysZQ/hUwxU/zeX17MTpXjWjx/olb1",
	"U5GEMi5F1md7p2xfrNy/LRKmBHq635mnriwqyGCv34yiJhHF7DIzP67IT39Pffn37TF6KmLZ98ZVprVC",
	"pqfBRY/y2uve8/amA9WlHaU3pa+d/uBRp8ejCvcv8171vQpBU/1KgS+lZ7XXZwy1o5s5XIDnbvkUrnnK",
	"+9NRVUzz4o7YodubNLz+d+pKzrZyUJwbW9NlvVJ0dY8v7dHwOdTYc2lWPpElS8CXJfl9jqjvKW8Rp1rv",
	"mfuDV+Jp3otX9OhS0XHyegtdks7dl0qeWTc9Hx9LPuFbhFd0jS5RDPnyz0PpDjDSzpteLRnuxAP78MR7",
	"yulxNyEa19hND8f36U7PiC8P8h13ahFM6ALC44KSPuU+cebiZvJ200Bs40oZdqabT/3oSZkp0+23LRr9",
	"PMDPdihdDsQn0eW01OlplMU3Jqm25HuqO8pZP2GgJMf9NF8p3A/L3t2eZGbyEfqmTuAzrw08n0ZkZovn",
	"PPDN75WnIj70/0oj4dQ09fI0HY/Op70mFZNs2h4x184/xgumbaAa1+Ww/B30CnzzI7/aahjWouO6zNwy",
	"VKcJyeL+oqs/LgT/NKNIpj+Orv+ooff0Z1MBrJeZ0wazx5XzA2zW0DKTV+RWXGRG+d3D7Pnx4yntS81o",
	"8lPAXQQgc44IT+QcHgsuBQzfRUxeHubSF7GWOSB86tBcTLZzfe05h4inNrzP4QtzBPhnO1eTSXNvSn/i",
	"qQdtPyl2NlJH+mG09v84WpurefK0AzZFZ22aM23GX90qijiStf9W4c2fisYvImTf8En+L41UediVL/D2",
	"Cq9i0TuUnBCG+RIY96BbUb7p2kbjvFPzlDn8PutMo1dDDsV9cZeO23Yb8jW3Wa89JP9DRjJ63CypXmxX",
	"vNfOAOP3pEKaXvF7PmFkyOxL711ucPAryfI1KPkagLytMClaLtDWXl6mFjLoUGjiSYHwOBwVR2bLlDoa",
	"CCoEVnRMl6pPbuVe3fxvAAAA//8IRDeQV0cAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
