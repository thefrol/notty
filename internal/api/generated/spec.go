// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
