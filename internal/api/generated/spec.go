// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
