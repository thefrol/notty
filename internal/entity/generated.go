// Package entity provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package entity

import (
	"time"
)

// Customer Клиент, которому будет приходить рассылка. Имеет номер телефона, имя оператора и тег, по которому его сможет найти рассылка.
type Customer struct {
	// Id айдишник сообщения, английские буквы и тире. Подойдет UUID
	Id string `json:"id"`

	// Name имя человека
	Name string `json:"name"`

	// Operator оператор, строка
	Operator string `json:"operator"`

	// Phone номер телефона в формате +71112223344
	Phone string `json:"phone"`

	// Tag тег, по которому можно будет таргетировать рассылку
	Tag string `json:"tag"`
}

// Error defines model for Error.
type Error struct {
	Code string `json:"code"`
	Desc string `json:"desc"`
}

// Message defines model for Message.
type Message struct {
	CustomerId     string     `json:"customer_id"`
	Id             string     `json:"id"`
	Phone          string     `json:"phone"`
	Sent           *time.Time `json:"sent,omitempty"`
	Status         string     `json:"status"`
	SubscriptionId string     `json:"subscription_id"`
	Text           string     `json:"text"`
}

// Stats defines model for Stats.
type Stats map[string]int

// Subscription Не смотря на название, это сущности рассылки. Имеет время начала, до которого сообщения рассылаться не будут, и время окончания, после которого тоже не будут рассылаться сообщения. Есть фильтр по тегам и оператору, которые работают в формате постревкого ILIKE.
type Subscription struct {
	// Desc Описание рассылки, просто для чего она создавалась и тд.
	Desc string `json:"desc"`

	// End время окончания, после этого времени рассылаться не будет
	End time.Time `json:"end"`

	// Id айдишник, английские буквы и тире. Может быть UUID
	Id string `json:"id"`

	// OperatorFilter фильтр по оператору, работает как ILIKE в SQL
	OperatorFilter string `json:"operator_filter"`

	// PhoneFilter фильтр по номеру телефона, сейчас не используется
	PhoneFilter string `json:"phone_filter"`

	// Start время начала, до этого времени рассылаться не будет
	Start time.Time `json:"start"`

	// TagFilter фильтр по оператору, работает как ILIKE в SQL
	TagFilter string `json:"tag_filter"`

	// Text Текст сообщения в рассылке
	Text string `json:"text"`
}

// CreateClientJSONRequestBody defines body for CreateClient for application/json ContentType.
type CreateClientJSONRequestBody = Customer

// UpdateClientJSONRequestBody defines body for UpdateClient for application/json ContentType.
type UpdateClientJSONRequestBody = Customer

// CreateSubscriptionJSONRequestBody defines body for CreateSubscription for application/json ContentType.
type CreateSubscriptionJSONRequestBody = Subscription

// UpdateSubscriptionJSONRequestBody defines body for UpdateSubscription for application/json ContentType.
type UpdateSubscriptionJSONRequestBody = Subscription
